/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Game, GameInterface } from "../../contracts/Game";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "encrypted_moves",
    outputs: [
      {
        internalType: "euint8",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasPlayed1",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasPlayed2",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joinGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "externalEuint8",
        name: "input",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "playGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "result",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "input",
        type: "bool",
      },
    ],
    name: "selectSinglePlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b503361018b6100af604080516080810182525f80825260208201819052918101829052606081019190915250604080516080810182527350157cffd6bbfa2dece204a89ec419c23ef5755d815273cd3ab3bd6bcc0c0bf3e27912a92043e817b1cf696020820152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac9181019190915273901f8942346f7ab3a01f6d7613119bca447bb030606082015290565b80517fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea60080546001600160a01b03199081166001600160a01b039384161790915560208301517fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea6018054831691841691909117905560408301517fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea6028054831691841691909117905560608301517fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea6038054909216921691909117905550565b7f5ea69329017273582817d320489fbd94f775580e90c092699ca6f3d12fdf7d0080546001600160a01b03191673a02cda4ca3a71d7c46997716f4283aa851c288121790556001600160a01b0381166101fd57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6102068161020c565b5061025b565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a39806102685f395ff3fe608060405234801561000f575f5ffd5b50600436106100c4575f3560e01c80638da5cb5b1161007d578063e17bc50c11610058578063e17bc50c14610199578063f2fde38b146101ac578063f71d96cb146101bf575f5ffd5b80638da5cb5b1461014c578063c331d56c14610170578063d4f77b1c14610191575f5ffd5b80633989cd8e116100ad5780633989cd8e146101115780636537214714610123578063715018a614610142575f5ffd5b8063052e89f8146100c85780631103ff35146100f0575b5f5ffd5b6003546100db9062010000900460ff1681565b60405190151581526020015b60405180910390f35b6101036100fe3660046108b4565b6101d2565b6040519081526020016100e7565b6003546100db90610100900460ff1681565b6006546101309060ff1681565b60405160ff90911681526020016100e7565b61014a6101e8565b005b5f546001600160a01b03165b6040516001600160a01b0390911681526020016100e7565b61014a61017e3660046108cb565b6003805460ff1916911515919091179055565b61014a6101fb565b61014a6101a73660046108ea565b610311565b61014a6101ba366004610961565b61052d565b6101586101cd3660046108b4565b61056a565b600481600281106101e1575f80fd5b0154905081565b6101f0610589565b6101f95f6105b5565b565b60035460ff1615610289576001546001600160a01b0316156102515760405162461bcd60e51b815260206004820152600a602482015269131bd8989e48119d5b1b60b21b60448201526064015b60405180910390fd5b600180546001600160a01b03191633908117825590805b0180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031615806102aa57506002546001600160a01b0316155b6102e35760405162461bcd60e51b815260206004820152600a602482015269131bd8989e48119d5b1b60b21b6044820152606401610248565b6001546001600160a01b0316156102fd5733600180610268565b600180546001600160a01b03191633179055565b60035460ff16156104185760015f01546001600160a01b031633146103695760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210283630bcb2b960911b6044820152606401610248565b5f6103a98484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061060492505050565b6003805462ffff0019166201010017905590508060045f01556103cc6004610618565b6005556103dd60045f5b015461062d565b506103f760045f5b01545f546001600160a01b031661063c565b50610404600460016103d6565b50610411600460016103e5565b5050505050565b60015f01546001600160a01b031633148061043f575060018001546001600160a01b031633145b61047c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210283630bcb2b960911b6044820152606401610248565b5f6104bc8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061060492505050565b6001549091506001600160a01b03163303610503576003805461ff0019166101001790558060045f01556104f160045f6103d6565b506104fd60045f6103e5565b50610527565b6003805462ff000019166201000017905580600460010155610404600460016103d6565b50505050565b610535610589565b6001600160a01b03811661055e57604051631e4fbdf760e01b81525f6004820152602401610248565b610567816105b5565b50565b60018160028110610579575f80fd5b01546001600160a01b0316905081565b5f546001600160a01b031633146101f95760405163118cdaa760e01b8152336004820152602401610248565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6106118383600261064e565b9392505050565b5f6106278260ff16600261076e565b92915050565b5f610638823061082b565b5090565b5f610647838361082b565b5090919050565b7fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea6015460405163196d0b9b60e01b81525f917fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea600916001600160a01b039091169063196d0b9b906106c79088903390899089906004016109a7565b6020604051808303815f875af11580156106e3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107079190610a01565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b158015610750575f5ffd5b505af1158015610762573d5f5f3e3d5ffd5b50505050509392505050565b7fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea601546040516324777a3f60e11b81525f917fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea600916001600160a01b03909116906348eef47e906107e39087908790600401610a18565b6020604051808303815f875af11580156107ff573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108239190610a01565b949350505050565b5f7fed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea6008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b158015610899575f5ffd5b505af11580156108ab573d5f5f3e3d5ffd5b50505050505050565b5f602082840312156108c4575f5ffd5b5035919050565b5f602082840312156108db575f5ffd5b81358015158114610611575f5ffd5b5f5f5f604084860312156108fc575f5ffd5b83359250602084013567ffffffffffffffff811115610919575f5ffd5b8401601f81018613610929575f5ffd5b803567ffffffffffffffff81111561093f575f5ffd5b866020828401011115610950575f5ffd5b939660209190910195509293505050565b5f60208284031215610971575f5ffd5b81356001600160a01b0381168114610611575f5ffd5b605481106109a357634e487b7160e01b5f52602160045260245ffd5b9052565b8481526001600160a01b0384166020820152608060408201525f8351806080840152806020860160a085015e5f60a0828501015260a0601f19601f8301168401019150506109f86060830184610987565b95945050505050565b5f60208284031215610a11575f5ffd5b5051919050565b82815260408101610611602083018461098756fea164736f6c634300081c000a";

type GameConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GameConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Game__factory extends ContractFactory {
  constructor(...args: GameConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Game & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Game__factory {
    return super.connect(runner) as Game__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GameInterface {
    return new Interface(_abi) as GameInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Game {
    return new Contract(address, _abi, runner) as unknown as Game;
  }
}
