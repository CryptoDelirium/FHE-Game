/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackDecryptMultipleValues"
      | "encrypted_moves"
      | "endGame"
      | "hasPlayed1"
      | "hasPlayed2"
      | "joinGame"
      | "playGame"
      | "players"
      | "requestDecryptPlayerMoves"
      | "result"
      | "selectMode"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DecryptionFulfilled"): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackDecryptMultipleValues",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encrypted_moves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasPlayed1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPlayed2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playGame",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryptPlayerMoves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(functionFragment: "selectMode", values: [boolean]): string;

  decodeFunctionResult(
    functionFragment: "callbackDecryptMultipleValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encrypted_moves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPlayed1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPlayed2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryptPlayerMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selectMode", data: BytesLike): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Game extends BaseContract {
  connect(runner?: ContractRunner | null): Game;
  waitForDeployment(): Promise<this>;

  interface: GameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackDecryptMultipleValues: TypedContractMethod<
    [
      requestID: BigNumberish,
      decryptPlayer1: BigNumberish,
      decryptPlayer2: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  encrypted_moves: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  endGame: TypedContractMethod<[], [bigint], "nonpayable">;

  hasPlayed1: TypedContractMethod<[], [boolean], "view">;

  hasPlayed2: TypedContractMethod<[], [boolean], "view">;

  joinGame: TypedContractMethod<[], [void], "nonpayable">;

  playGame: TypedContractMethod<
    [input: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  requestDecryptPlayerMoves: TypedContractMethod<[], [void], "nonpayable">;

  result: TypedContractMethod<[], [bigint], "view">;

  selectMode: TypedContractMethod<[input: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackDecryptMultipleValues"
  ): TypedContractMethod<
    [
      requestID: BigNumberish,
      decryptPlayer1: BigNumberish,
      decryptPlayer2: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encrypted_moves"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "hasPlayed1"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPlayed2"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "playGame"
  ): TypedContractMethod<
    [input: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "requestDecryptPlayerMoves"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "result"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "selectMode"
  ): TypedContractMethod<[input: boolean], [void], "nonpayable">;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
  };
}
